<?xml version="1.0" encoding="UTF-8"?>
<project name="rest_mysql" default="dist" basedir=".">

  <!-- ============================================================== -->
  <!-- Properties                                                     -->
  <!-- ============================================================== -->
  <property environment="env" /> 
  <property file="local.properties"/>
  <property file="build.properties" />

  <property name="FLEX_HOME" value="${env.FLEX_HOME}" />
	
  <property name="APP_ROOT" value="${flex.app.root}" />

  <!-- ============================================================== -->
  <!-- Classpath                                                      -->
  <!-- ============================================================== -->
  <path id="global.classpath">
    <pathelement path="${java.class.path}" />
    <pathelement location="${build.classes.dir}" />
    <fileset dir="${java.lib.dir}" includes="${java.lib.files}" />
    <fileset dir="${tomcat.lib.dir}" includes="servlet-api.jar" />
  </path>
  	
  <!-- ============================================================== -->
  <!-- Taskdefs                                                       -->
  <!-- ============================================================== -->
  <echo>FLEX ANT LIB: ${build.flex.ant.lib}</echo>
  <taskdef resource="flexTasks.tasks" classpath="${build.flex.ant.lib}" />
  
  <!-- ============================================================== -->
  <!-- Run Targets                                                    -->
  <!-- ============================================================== -->
  <target name="dist"
          depends="clean,mkdirs,get-files,compile-java,war"
          description="Cleans, compiles, and builds application." />

  <!-- ============================================================== -->
  <!-- Usage - default target                                         -->
  <!-- ============================================================== -->
  <target name="usage" description="Displays the usage help message.">
    <echo message="${app.name} ${app.version} build" />
    <echo message="-------------------------------------------------------" />
    <echo message="" />
    <echo message="Available targets:" />
    <echo message="usage     --> Displays the usage help message." />
    <echo message="compile   --> Compiles java source code." />
    <echo message="context   --> Deploys the tomcat development context." />
    <echo message="dist      --> Cleans, compiles, and builds application." />
    <echo message="doc       --> Creates javadoc documentation." />
    <echo message="war       --> Creates packed and unpacked wars." />
    <echo message="reload    --> Reloads application in Tomcat." />
    <echo message="start     --> Starts Tomcat application." />
    <echo message="stop      --> Stops Tomcat application." />
    <echo message="local     --> Deploy local workspace classes." />
  </target>
  
  <!-- ============================================================== -->
  <!-- Deploy to local workspace                                      -->
  <!-- ============================================================== -->
  <target name="local">
    <copy todir="${webinf.classes.dir}">
      <fileset dir="${bin.dir}" />
    </copy>
    <copy todir="${webinf.classes.dir}">
      <fileset dir="${res.classes.dir}" />
    </copy>
  </target>

  <!-- ============================================================== -->
  <!-- Make directories, clean, and copy files                        -->
  <!-- ============================================================== -->
  <target name="clean" description="Cleans the build environment">    
    <delete dir="${webinf.classes.dir}" failonerror="false" />
    <mkdir dir="${webinf.classes.dir}" />
    <delete dir="${build.dir}" failonerror="true" />
  </target>  
		
  <target name="mkdirs">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.java.src.dir}" />
    <mkdir dir="${build.classes.dir}" />
    <mkdir dir="${build.docs.dir}" />
    <mkdir dir="${build.dist.dir}" />
    <mkdir dir="${build.dist.war.dir}" />
  </target>

  <target name="get-destination" unless="destination.environment">
	  <input message="Enter environment to build to (enter=${env.default})"
		     validargs="local,test,prod" defaultvalue="${env.default}"
		     addproperty="destination.environment" />	  
  </target>
	
  <target name="get-files" depends="get-destination">
	<tstamp />
  	<condition property="condition.env.local">
  	  <equals arg1="${destination.environment}" arg2="local" casesensitive="false" />
	</condition>
  	<condition property="condition.env.test">
  	  <equals arg1="${destination.environment}" arg2="test" casesensitive="false" />
	</condition>
  	  	<condition property="condition.env.prod">
  	  	  <equals arg1="${destination.environment}" arg2="prod" casesensitive="false" />
  		</condition>
  	<antcall target="get-files-local"/>
  	<antcall target="get-files-test"/>
  	<antcall target="get-files-prod"/>
  </target>
	
  <target name="get-files-local" if="condition.env.local" >
  	<loadproperties srcfile="env-local.properties"></loadproperties>
  	<property name=".src.java.dir" value="${java.src.dir}" />
  	<antcall target="-copy-java-files" />
  	<property name=".src.web.dir" value="${web.dir}" />
  	<antcall target="-copy-web-files" />
  </target>

  <target name="get-files-test" if="condition.env.test">
  	<loadproperties srcFile="env-test.properties" />	
	<antcall target="get-files-cvs" />
  </target>
	
  <target name="get-files-prod" if="condition.env.prod">
  	<loadproperties srcFile="env-prod.properties" />
  	<antcall target="get-files-cvs" />
  </target>
	
  <target name="get-files-cvs" unless="condition.env.local">
  	<input message="Enter you CVS username" addproperty="username" />
  	<input message="Enter version to get from CVS or HEAD for latest (enter=${ver.default})"
  			     defaultvalue="${ver.default}"
  				 addproperty="ver" />
  	<cvs cvsRoot="${cvs.type}${username}${cvs.root}" package="${project.name}" dest="${cvs.dir}" failonerror="true" tag="${ver}" />
  	<property name=".src.java.dir" value="${cvs.java.src.dir}" />
  	<antcall target="-copy-java-files" />
  	<property name=".src.flex.dir" value="${cvs.flex.src.dir}" />
  	<antcall target="-copy-flex-files" />
  	<property name=".src.web.dir" value="${cvs.web.src.dir}" />
  	<antcall target="-copy-web-files" />
  </target>
	
  <!-- ============================================================== -->
  <!-- Compile, Javadoc, and Unit Testing                             -->
  <!-- ============================================================== -->
  <target name="compile-flex" depends="-set-local-destination.environment,get-files" description="Compiles flex source code.">
  	<echo>FLEX HOME: ${FLEX_HOME}</echo>
  	<mxmlc file="${build.flex.src.dir}/${prod.name}.mxml" failonerror="true"  output="${build.web.dir}/${prod.name}.swf" maxmemory="1024m" keep-generated-actionscript="false">
	  <load-config filename="${flex.compile.load-config}"/>
	  <source-path path-element="${flex.compile.source-path}" />
  	  <jvmarg value="-Dassert" /> 
  	  <jvmarg value="-Xms32m" /> 
  	  <jvmarg value="-Xmx1024m" /> 
  	  <arg value="+srcdir=${build.flex.src.dir}" /> 
  	  <compiler.library-path dir="${project.flex.dir}" append="true">
  		 <include name="libs/*.swc" />
  	  </compiler.library-path>
  	</mxmlc>

  	<html-wrapper
              title="DietCRM"
              height="300"
              width="400"
              bgcolor="red"
              application="app"
              swf="diet_crm"
              version-major="10"
	      version-minor="0"
	      file="${html_file}"
              version-revision="0"
              history="true"
              template="express-installation"
              output="${build.flex.src.dir}"/>
  
  	<copy todir="${war.expanded.dir}">
		<fileset dir="${build.flex.src.dir}">
		  <include name="asset/**" />
	  	  <include name="**/*.html"/>
	  	  <include name="**/*.js"/>
	  	  <include name="**/*.swf"/>
		 </fileset>
  	 </copy>
  </target>
 
  <target name="compile-java" depends="-set-local-destination.environment,get-files" description="Compiles java source code.">
    <javac srcdir="${build.java.src.dir}"
           destdir="${build.classes.dir}"
           debug="${java.compile.debug}"
           optimize="${java.compile.optimize}"
           deprecation="${java.compile.depreciation}"
           verbose="false">
      <classpath refid="global.classpath" />
    </javac>
    <copy todir="${build.classes.dir}">
      <fileset dir="${build.java.src.dir}" includes="${resource.files}" />
    </copy>
  </target>

  <target name="doc" description="Creates javadoc documentation.">
    <javadoc destdir="${build.docs.dir}/api"
             author="true"
             version="true"
             use="true"
             windowtitle="${javadoc.title}-${DSTAMP}">
      <classpath refid="global.classpath" />
      <fileset dir="${build.java.src.dir}" />
    </javadoc>
  </target>

  <!-- ============================================================== -->
  <!-- War and Deployment                                             -->
  <!-- ============================================================== -->
  <target name="war" description="Creates packed and unpacked wars.">
    <mkdir dir="${war.expanded.dir}" />
    <copy todir="${war.expanded.dir}">
      <fileset dir="${build.web.dir}" />
    </copy>
    <copy todir="${war.expanded.dir}/WEB-INF/classes">
      <fileset dir="${build.classes.dir}" />
      <fileset dir="${build.java.src.dir}" includes="**/*.xml, **/*.properties" />
      <fileset dir="${build.java.src.dir}" includes="**/*.xml, **/*.properties" />
    </copy>
  	<copy todir="${war.expanded.dir}/WEB-INF/lib">
  	  <fileset dir="${java.lib.dir}" />
  	</copy>
    <war destfile="${war.packed.file}"
         webxml="${war.expanded.dir}/WEB-INF/web.xml">
      <fileset dir="${war.expanded.dir}" />
    </war>
  </target>

  <!-- ============================================================== -->
  <!-- Context tasks                                                  -->
  <!-- ============================================================== -->
  <target name="context" description="Deploys the tomcat development context.">
    <mkdir dir="${tomcat.context.deploy}" />
    <filter token="docbase" value="${web.dir}" />
    <filter token="context" value="${war.context}" />
    <copy filtering="true"
          file="${res.templates.dir}/context.xml.template"
          tofile="${tomcat.context.deploy}/${war.context.file}" />
  </target>

  <!-- ============================================================== -->
  <!-- Tomcat tasks                                                   -->
  <!-- ============================================================== -->
  <target name="reload" description="Reloads application in Tomcat.">
    <reload url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/" />
  </target>
  <target name="start" description="Starts Tomcat application.">
    <start url="${tomcat.manager.url}"
           username="${tomcat.username}"
           password="${tomcat.password}"
           path="${war.context}" />
  </target>
  <target name="stop" description="Stops Tomcat application.">
    <stop url="${tomcat.manager.url}"
          username="${tomcat.username}"
          password="${tomcat.password}"
          path="${war.context}" />
  </target>

	<target name="-copy-flex-files">
		<copy todir="${build.flex.src.dir}" >
		  		<fileset dir="${.src.flex.dir}">
			  	  	<exclude name="**/*.html"/>
			  	  	<exclude name="**/*.mxml" />
			  	  	<exclude name="**/*.xml" />
			  	  	<exclude name="**/*.css" />
			  	  	<exclude name="**/*.as" />
				  </fileset>
		  	</copy>
		  	<copy todir="${build.flex.src.dir}" >
		  	  <fileset dir="${.src.flex.dir}" >
		  	  	<include name="**/*.html"/>
		  	  	<include name="**/*.mxml" />
		  	  	<include name="**/*.xml" />
		  	  	<include name="**/*.css" />
		  	  	<include name="**/*.as" />
		    	  </fileset>
		      	<filterchain>
		      		<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
		      		      <param type="propertiesfile" value="${destination.properties.file}"/>
		      		</filterreader>
		      	</filterchain>    	
		    		
		  	</copy>	
	</target>
		
	<target name="-copy-java-files">
		<copy todir="${build.java.src.dir}">
	  	  <fileset dir="${.src.java.dir}"/>
	    	<filterchain>
	    		<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
	    		      <param type="propertiesfile" value="${destination.properties.file}"/>
	    		</filterreader>
	    	</filterchain>    	
		</copy>
	</target>
	
	<target name="-copy-web-files">
		<!--
		<copy todir="${war.expanded.dir}">
	  	  <fileset dir="${java.webContent.dir}">
		  	<include name="**/*.xml" />
	  	   	<include name="**/*.html"/>
	  	   	<include name="**/*.mxml" />
	  	   	<include name="**/*.xml" />
	  	   	<include name="**/*.swf" />
	  	   	<include name="**/*.xml" />
	  	   	<include name="**/*.css" />
	  	   	<include name="**/*.as" />
		   	<include name="**/*.jsp" />
		   	<include name="**/*.js" />
		  </fileset>
		</copy>
		<copy todir="${war.expanded.dir}/WEB-INF">
			<fileset dir="${java.webContent.dir}/WEB-INF">
		  	<include name="**/*.xml" />
		  </fileset>
	  	</copy>
	  	-->
		<copy todir="${build.web.dir}">
		  <fileset dir="${.src.web.dir}">
	  	  	<exclude name="**/*.html"/>
	  	  	<exclude name="**/*.mxml" />
	  	  	<exclude name="**/*.xml" />
	  	  	<exclude name="**/*.css" />
	  	  	<exclude name="**/*.as" />
		  	<exclude name="**/*.jsp" />
		  	<exclude name="**/*.js" />
		  </fileset>
		</copy>
		<copy todir="${build.web.dir}">
		  <fileset dir="${.src.web.dir}">
	  	   <include name="**/*.html"/>
	  	   <include name="**/*.mxml" />
	  	   <include name="**/*.xml" />
	  	   <include name="**/*.swf" />
	  	   <include name="**/*.xml" />
	  	   <include name="**/*.css" />
	  	   <include name="**/*.as" />
		   <include name="**/*.jsp" />
		   <include name="**/*.js" />
	       </fileset>
	    	<filterchain>
	    		<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
	    		      <param type="propertiesfile" value="${destination.properties.file}"/>
	    		</filterreader>
	    	</filterchain>    	
		</copy>			
	</target>
	
	<target name="-set-local-destination.environment">
		<property name="destination.environment" value="local" />
	</target>
</project>
