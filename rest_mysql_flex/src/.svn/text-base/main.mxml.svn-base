<?xml version="1.0" encoding="utf-8"?>
<s:Application name="restmysql"
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:mx="library://ns.adobe.com/flex/halo"
        height="100%" creationComplete="init(event)"
        backgroundColor="haloSilver">
    <fx:Script>
    	<![CDATA[
    	
    		import mx.events.IndexChangedEvent;
    		import mx.utils.object_proxy;
    		import mx.collections.ArrayCollection;
    		import mx.rpc.events.FaultEvent;
    		import mx.rpc.events.ResultEvent;
    		import mx.utils.ObjectUtil;
    		import mx.utils.ObjectProxy;
    		import mx.events.FlexEvent;
    		import mx.controls.Alert;
    		
    		import app.vo.Book;
    		import app.model.ModelLocator;
    		
    		private const APP_NAME = "REST-MySQL Example";
    		
    		private var selectedBook:Book = null;
    		
    		private var addingMode:Boolean = false;
    		
    		private var deleteMode:Boolean = false;
    		
    		private var pendingUpdate:Book = null;
    		
    		
    		[Bindable]
			public var model:ModelLocator = ModelLocator.getInstance();
			
			[Bindable]
			private var myUrl:String = "http://localhost:8080/restmysql/resources/books";
    		
    		
    		protected function init(event:FlexEvent):void
    		{
    			//
    			// retrieves all of the resouces
    			//
    			getBooks.url = this.myUrl;
    			getBooks.send();
    		}
    		

    		protected function getBooks_resultHandler(event:ResultEvent):void {
    			var resp:XML = new XML(event.result as XML);
                var i:int = 0;
                var j:String = null;
                var obj:Object = null;
                var book:Book = null;
                
                
                if (deleteMode) {
                	trace("getBooks_resultHandler(): delete mode!");
                	model.bookModel.deleteBook(selectedBook.bookid);
                	deleteMode = false;
                }
                else {
                
	                var count:int = resp.children().length();
	                
					if (count > 0) {
						
						model.bookModel.clearList();
					}
					
					for (i=0; i<count; i++) {
						var rec:Object = resp.Book[i];
						if (rec != null) {
							book = new Book();
	                		book.deserialize(rec);
							model.bookModel.addBook(book);
						}
					}
	                
	                 
	        	}
	        	trace("getBooks_resultHandler(): book count - " + 
	                	(model.bookModel.list != null ? model.bookModel.list.length : 0));
	        	bookList.dataProvider = model.bookModel.list;
    		}


    		protected function getBooks_faultHandler(event:FaultEvent):void {
    			Alert.show("getBooks FAILED - " + event.fault.faultString);
    		}


    		protected function refreshBtn_clickHandler(event:MouseEvent):void {
    			//
    			// retrieves ALL of the resources
    			//
    			getBooks.url = this.myUrl;
    			getBooks.send();
    		}	

    		protected function bookList_selectionChangedHandler(event:IndexChangedEvent):void
    		{
    			if (bookList.selectedItem == null) {
    				authorText.text = "";
    				titleText.text = "";
    				saveBtn.enabled = false;
    				deleteBtn.enabled = false;
    			}
    			else {
    				addingMode = false;
    				saveBtn.enabled = true;
    				deleteBtn.enabled = true;
    				selectedBook = (bookList.selectedItem as Book);
    				authorText.text = selectedBook.author;
    				titleText.text = selectedBook.title;
    			}
    		}

    		protected function deleteBtn_clickHandler(event:MouseEvent):void
    		{
    			deleteMode = true;
    			getBooks.url = this.myUrl + "/" + selectedBook.bookid;
    			var params:Object = { deleteFlag:1 };				
    			getBooks.send(params);
    		}

    		protected function saveBtn_clickHandler(event:MouseEvent):void
    		{
    			if (selectedBook != null) {
    				pendingUpdate = new Book();
    				pendingUpdate.bookid = selectedBook.bookid;
    				pendingUpdate.title = titleText.text;
    				pendingUpdate.author = authorText.text;
    				addOrUpdateBook.send(pendingUpdate.serialize());
    			}
    			else {
    				pendingUpdate = new Book();
    				pendingUpdate.bookid = -1;
    				pendingUpdate.title = titleText.text;
    				pendingUpdate.author = authorText.text;
    				addOrUpdateBook.send(pendingUpdate.serialize());
    			}
    		}
    		
    		protected function addBtn_clickHandler(event:MouseEvent):void
    		{
    			trace("addBtn_clickHandler(): Entered");
    			selectedBook = null;
    			addingMode = true;
    			authorText.text = "";
    			titleText.text = "";
    		}

    		protected function addOrUpdateBook_resultHandler(event:ResultEvent):void
    		{
    			var resp:XML = new XML(event.result as XML);
                var obj:Object = null;
                var book:Book = null;
               
				var rec:Object = resp.Book[0];
				if (rec != null) {
					if (addingMode) {
						book = new Book();
	            		book.deserialize(rec);
						model.bookModel.addBook(book);
						bookList.dataProvider = model.bookModel.list;
						bookList.invalidateDisplayList();
						bookList.invalidateProperties();
						bookList.invalidateSize();
						
						authorText.text = "";
						titleText.text = "";
						this.addingMode = false;
						bookList.selectedIndex = (model.bookModel.list.length-1);
					}
					else {
						model.bookModel.updateBook(pendingUpdate);
						bookList.dataProvider = model.bookModel.list;
						bookList.invalidateDisplayList();
						bookList.invalidateProperties();
						bookList.invalidateSize();
						Alert.show("Updated!", APP_NAME);
					}
					
					Alert.show("NEW BOOK ADDED!", APP_NAME);
				}
    		}


    		protected function addOrUpdateBook_faultHandler(event:FaultEvent):void
    		{
    			Alert.show("Add FAILED -- " + event.fault.faultString, APP_NAME);
    		}
    		
    		
    		private function onChange(event:Event):void 
    		{
    			if (authorText.text != null && authorText.text.length > 0 && titleText.text != null && titleText.text.length > 0) {
    				saveBtn.enabled = true;
    			}
    			else {
    				saveBtn.enabled = false;
    			}
    		}

    		protected function deleteBook_faultHandler(event:FaultEvent):void
    		{
    			Alert.show("Delete FAILED -- " + event.fault.faultString, APP_NAME);
    		}

    	]]>
    </fx:Script>
    <fx:Declarations>
    	<mx:HTTPService id="getBooks"  useProxy="false" method="GET" 
    		 result="getBooks_resultHandler(event)" resultFormat="e4x" 
    		 fault="getBooks_faultHandler(event)" />
    	<mx:HTTPService id="addOrUpdateBook" url="{myUrl}" contentType="application/xml" resultFormat="e4x" 
    		useProxy="false" method="POST" result="addOrUpdateBook_resultHandler(event)" 
    		fault="addOrUpdateBook_faultHandler(event)"  />
    </fx:Declarations>
 	
 	<s:Panel id="dialog" title="{APP_NAME}" height="100%" horizontalCenter="0">
 		
    <mx:Box id="pnl" direction="vertical"
            contentBackgroundColor="#CCCCCC"
            width="100%" height="100%"
            horizontalCenter="0" verticalCenter="0" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5">
       <mx:Form width="100%" horizontalCenter="0">
       		<mx:FormHeading label="Book Information" />
 			<mx:FormItem label="Author" width="100%">
 				<s:TextInput id="authorText" change="onChange(event)" />
 			</mx:FormItem>
 			<mx:FormItem label="Title" width="100%">
 				<s:TextInput id="titleText" change="onChange(event)" />
 			</mx:FormItem>
 			<mx:Box direction="horizontal" width="100%" horizontalAlign="right" 
 			paddingBottom="10"	paddingTop="10" paddingRight="10" paddingLeft="10">
 			<s:Button  id="addBtn" label="New Book" click="addBtn_clickHandler(event)" />
 			<mx:Spacer width="100%" />
 			<s:Button  id="saveBtn" label="Save" enabled="false" click="saveBtn_clickHandler(event)" />
 			</mx:Box>
 		</mx:Form>
 		
 		
       	<mx:Box direction="horizontal" width="100%" height="100%" borderStyle="solid" 
        	paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10">
			<s:List id="bookList" width="100%" height="100%" labelField="title" selectionChanged="bookList_selectionChangedHandler(event)"/>
        </mx:Box>
        <mx:Box direction="horizontal" width="100%" borderStyle="solid" 
        	paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10">
        	<s:Button  id="deleteBtn" enabled="false" click="deleteBtn_clickHandler(event)" label="Delete" />
        	<mx:Spacer width="100%" />
       		<s:Button  id="refreshBtn" click="refreshBtn_clickHandler(event)" label="Refresh" />
       </mx:Box>
    </mx:Box>
 	</s:Panel>
</s:Application>
